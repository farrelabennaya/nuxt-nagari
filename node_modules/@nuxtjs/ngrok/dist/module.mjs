import { defineNuxtModule, createResolver, addServerPlugin } from '@nuxt/kit';
import { defu } from 'defu';
import { connect } from '@ngrok/ngrok';
import { colors } from 'consola/utils';
import { consola } from 'consola';

function createNgrokConnection(options) {
  connect({
    ...options
  }).then((listener) => {
    consola.success(colors.green("Ngrok connected at"), colors.blue(listener.url() ?? "undefined"));
  }).catch((error) => {
    consola.error(colors.red("Ngrok connection error:"), error);
  });
}

const module = defineNuxtModule({
  meta: {
    name: "nuxt-ngrok",
    configKey: "ngrok"
  },
  defaults: {},
  setup(_options, _nuxt) {
    const { resolve } = createResolver(import.meta.url);
    const config = _nuxt.options.runtimeConfig;
    config.ngrok = defu(config.ngrok || {}, {
      // authtoken_from_env: import.meta.env?.NGROK_AUTHTOKEN ? true : false,
      addr: _nuxt.options.devServer.port,
      production: false,
      ..._options
    });
    if (_nuxt.options.dev) {
      _nuxt.hook("listen", async () => createNgrokConnection(config.ngrok));
    } else if (config.ngrok.production) {
      addServerPlugin(resolve("./runtime/server/plugins/ngrok"));
    }
  }
});

export { module as default };
