import { inject, ref, computed } from "vue";
import { useDebounceFn } from "@vueuse/core";
import { mergeConfig } from "../utils/index.js";
import appConfig from "#build/app.config";
import { formGroup } from "#ui/ui.config";
const formGroupConfig = mergeConfig(appConfig.ui.strategy, appConfig.ui.formGroup, formGroup);
export const useFormGroup = (inputProps, config) => {
  const formBus = inject("form-events", void 0);
  const formGroup2 = inject("form-group", void 0);
  const formInputs = inject("form-inputs", void 0);
  if (formGroup2) {
    if (inputProps?.id) {
      formGroup2.inputId.value = inputProps?.id;
    }
    if (formInputs) {
      formInputs.value[formGroup2.name.value] = formGroup2.inputId.value;
    }
  }
  const blurred = ref(false);
  function emitFormEvent(type, path) {
    if (formBus) {
      formBus.emit({ type, path });
    }
  }
  function emitFormBlur() {
    emitFormEvent("blur", formGroup2?.name.value);
    blurred.value = true;
  }
  function emitFormChange() {
    emitFormEvent("change", formGroup2?.name.value);
  }
  const emitFormInput = useDebounceFn(() => {
    if (blurred.value || formGroup2?.eagerValidation.value) {
      emitFormEvent("input", formGroup2?.name.value);
    }
  }, 300);
  return {
    inputId: computed(() => inputProps?.id ?? formGroup2?.inputId.value),
    name: computed(() => inputProps?.name ?? formGroup2?.name.value),
    size: computed(() => {
      const formGroupSize = config.size[formGroup2?.size.value] ? formGroup2?.size.value : null;
      return inputProps?.size ?? formGroupSize ?? formGroupConfig?.default?.size;
    }),
    color: computed(() => formGroup2?.error?.value ? "red" : inputProps?.color),
    emitFormBlur,
    emitFormInput,
    emitFormChange
  };
};
